; Cours 07 : letrec par mutation

#lang plait

;;;;;;;;;;;;;;;;;;;;;;;;
; Définition des types ;
;;;;;;;;;;;;;;;;;;;;;;;;

; Représentation des expressions
(define-type Exp
  [numE (n : Number)]
  [idE (s : Symbol)]
  [plusE (l : Exp) (r : Exp)]
  [multE (l : Exp) (r : Exp)]
  [letrecE (s : (Listof Symbol)) (rhs : (Listof Exp)) (body : Exp)]
  [ifE (cnd : Exp) (l : Exp) (r : Exp)]
  [lamE (par : Symbol) (body : Exp)]
  [appE (fun : Exp) (arg : Exp)]
  [pairE (l : Exp) (r : Exp)]
  [fstE (e : Exp)]
  [sndE (e : Exp)]
  ;[letrecE (par : (listof Symbol)) (arg : (listof Exp) (body : Exp)]
  


  )

; Représentation des valeurs
(define-type Value
  [numV (n : Number)]
  [closV (arg : Symbol) (body : Exp) (env : Env)]
  [undefV]
  [pairV (f : Thunk) (s : Thunk)] 
  )

; Représentation des liaisons
( define-type Binding
   [ bind ( name : Symbol ) (val : ( Boxof Thunk ))])

(define-type Thunk
  [delay (e : Exp) (env : Env) (mem : (Boxof (Optionof Value)))]
  [undef])

; Manipulation de l'environnement
(define-type-alias Env (Listof Binding))
(define mt-env empty)
(define extend-env cons)

; Force l'évaluation des promesses

(define (force [t : Thunk]) : Value
  (type-case Thunk t
    [(delay e env mem)
     (type-case (Optionof Value) (unbox mem)
       [(none)(begin (set-box! mem (some (undefV)))
                     (let ([val (interp e env)])
                       (begin
                         (set-box! mem (some val))
                         val)))]
       [(some val) val])]
    [(undef) (undefV)]))



(define (compose f g)
  (lambda (x) (f (g x))))





;;;;;;;;;;;;;;;;;;;;;;
; Analyse syntaxique ;
;;;;;;;;;;;;;;;;;;;;;;

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s) (numE (s-exp->number s))]
    [(s-exp-match? `SYMBOL s) (idE (s-exp->symbol s))]
    [(s-exp-match? `{+ ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (plusE (parse (second sl)) (parse (third sl))))]
    [(s-exp-match? `{* ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (multE (parse (second sl)) (parse (third sl))))]
    [(s-exp-match? `{- ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (plusE (parse (second sl)) (multE (numE -1) (parse (third sl)))))]
    [(s-exp-match? `{let {[SYMBOL ANY]} ANY} s)
     (let ([sl (s-exp->list s)])
       (let ([subst (s-exp->list (first (s-exp->list (second sl))))])
         (appE (lamE (s-exp->symbol (first subst)) (parse (third sl))) (parse (second subst)))))]
    
    [(s-exp-match? `{letrec {[SYMBOL ANY] [SYMBOL ANY] ...} ANY} s)
     (let ([sl (s-exp->list s)])
       (let ([substs (map s-exp->list (s-exp->list (second sl)))])
         (letrecE (map (compose s-exp->symbol first) substs)
                  (map (compose parse second) substs)
                  (parse (third sl)))))]
    
    [(s-exp-match? `{if ANY ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (ifE (parse (second sl)) (parse (third sl)) (parse (fourth sl))))]
    [(s-exp-match? `{lambda {SYMBOL} ANY} s)
     (let ([sl (s-exp->list s)])
       (let ([sll (s-exp->list (second sl))])
         (lamE (s-exp->symbol (first sll)) (parse (third sl)))))]
    [(s-exp-match? `{pair ANY ANY} s )
     (let ([sl (s-exp->list s)])
       (pairE (parse (second sl)) (parse (third sl))))]
    [(s-exp-match? `{fst ANY} s)
     (let ([sl (s-exp->list s)])
       (fstE (parse (second sl))))]
    [(s-exp-match? `{snd ANY} s)
     (let ([sl (s-exp->list s)])
       (sndE (parse (second sl))))]
    ;[(s-exp-match? `{letrec ANY ... ANY}
    ;              (let ([sl (s-exp->list s )])
    ;               (letrecE (parse (second sl )) (parse(third sl)))))] 
    [(s-exp-match? `{ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (appE (parse (first sl)) (parse (second sl))))]
    [else (error 'parse "invalid input")]))

;;;;;;;;;;;;;;;;;;
; Interprétation ;
;;;;;;;;;;;;;;;;;;
(define (boxifi-moi-ça env s rhs)
  (if (empty? s) env
       (let ([b (box (undef))])
       (let ([new-env (extend-env (bind (first s) b) env)])
           (boxifi-moi-ça new-env (rest s) (rest rhs))))))


(define (delay-moi-ça env s rhs)
  (if (empty? s ) env
      (let ([b (lookmerde (first s) env)])
              (begin (set-box! b  (delay (first rhs) env (box (none))))
              (delay-moi-ça env (rest s ) (rest rhs) )))))


(define (lookmerde [n : Symbol] [env : Env]) : (Boxof Thunk)
  (cond
    [(empty? env) (error 'lookmerde "box de merde")]
    [(equal? n (bind-name (first env))) (bind-val (first env))]
    [else (lookmerde n (rest env))]))

;  (letrecE
 ;'(even? odd?)
 ;(list
;  (lamE
;   'n
;   (ifE
;    (idE 'n)
;    (appE (idE 'odd?) (plusE (idE 'n) (multE (numE -1) (numE 1))))
;    (numE 1)))
;  (lamE
;   'n
;   (ifE
;    (idE 'n)
;    (appE (idE 'even?) (plusE (idE 'n) (multE (numE -1) (numE 1))))
;    (numE 0))))
; (appE (idE 'even?) (numE 5)))





;(define (delay-moi-ça rhs env)
 ; (let


; Interpréteur
(define (interp [e : Exp] [env : Env]) : Value
  (type-case Exp e
    [(numE n) (numV n)]
    [(idE s) (force (lookup s env))]
    [(plusE l r) (num+ (interp l env) (interp r env))]
    [(multE l r) (num* (interp l env) (interp r env))]
    [(letrecE s rhs body)
       (let ([new-env (delay-moi-ça (boxifi-moi-ça env s rhs) s rhs)])
         
           (interp body new-env))]
    [(ifE cnd l r)
     (type-case Value (interp cnd env)
       [(numV n) (if (not (= n 0)) (interp l env) (interp r env))]
       [else (error 'interp "not a number")])]
    [(lamE par body) (closV par body env)]
    [(appE f arg)
     (type-case Value (interp f env)
       [(closV par body c-env)
        (interp body (extend-env (bind par (box (delay arg env (box (none))))) c-env))]
       [else (error 'interp "not a function")])]

    [(pairE l r )
     (let ([f (delay l env (box (none)))])
       (let ([s (delay r env (box (none)))])
         (pairV f s )))]
    [(fstE p)
     (let ([pp (interp p env)])
       (if (pairV? pp)
           (force (pairV-f  pp))
           (error 'interp "not a pair")))]
    [(sndE p)
     (let ([pp (interp p env)])
       (if (pairV? pp)
           (force (pairV-s  pp))
           (error 'interp "not a pair")))]
    ;[(letrecE par arg body) 
    
    


    ))

; Fonctions utilitaires pour l'arithmétique
(define (num-op [op : (Number Number -> Number)]
                [l : Value] [r : Value]) : Value
  (if (and (numV? l) (numV? r))
      (numV (op (numV-n l) (numV-n r)))
      (error 'interp "not a number")))

(define (num+ [l : Value] [r : Value]) : Value
  (num-op + l r))

(define (num* [l : Value] [r : Value]) : Value
  (num-op * l r))

; Recherche d'un identificateur dans l'environnement
(define (lookup [n : Symbol] [env : Env]) : Thunk
  (cond
    [(empty? env) (error 'lookup "free identifier")]
    [(equal? n (bind-name (first env)))  (unbox (bind-val (first env)))]
    [else (lookup n (rest env))]))
;;;;;;;;;
; Tests ;
;;;;;;;;;

(define (interp-expr [e : S-Exp]) : Value
  (interp (parse e) mt-env))

(interp-expr `{letrec {[x x]} x})
( test ( interp-expr `{ letrec {[ numbers-from { lambda {n} { pair n { numbers-from {+ n 1} } } }]}
                         { let {[ ints { numbers-from 0}]}
                            { fst { snd { snd { snd ints } } } } } }) ( numV 3))

(test (interp-expr `{let {[x {1 2}]} 3}) (numV 3))
(test (interp-expr `{letrec {[x {1 2}]} 3}) (numV 3))
(test (interp-expr `{snd {pair {1 2} 3}}) (numV 3))
(test (interp-expr `{letrec {[fac {lambda {n}
                                    {if n
                                        {* n {fac {- n 1}}}
                                        1}}]}
                      {fac 6}})
      (numV 720))
(test (interp-expr `{letrec {[x x]} x}) (undefV))
(test (interp-expr `{letrec {[x 8]} x}) (numV 8))
( test ( interp-expr
         `{ letrec {[ numbers-from { lambda {n}
                                      { pair n
                                             { numbers-from {+ n 1} } } }]}
             { let {[ ints { numbers-from 0}]}
                { fst { snd { snd { snd ints } } } } } })
       ( numV 3))

( test ( interp-expr
         `{ letrec {[even? {lambda {n} {if n
                                           {odd? {- n 1} }
                                           1}}]
                    [odd? {lambda {n} {if n
                                          {even? {- n 1} }
                                          0} }]}
             { even? 5} })
       (numV 0))

( test ( interp-expr
         `{ letrec {[even? {lambda {n} {if n
                                           {odd? {- n 1} }
                                           1}}]
                    [odd? {lambda {n} {if n
                                          {even? {- n 1} }
                                          0} }]}
             { odd? 15} })
       (numV 1))


(test (interp-expr
       `{ letrec
             {; curryfied map2 on infinite lists
              [map2 { lambda {f}
                       { lambda {l1}
                          { lambda {l2}
                             { pair { {f { fst l1} } { fst l2} }
                                    { { { map2 f} { snd l1} } { snd l2} } } } } }]
              ; curryfied list-ref
              [list-ref { lambda {l}
                           { lambda {n}
                              { if n
                                   { { list-ref { snd l} } {- n 1} }
                                   { fst l} } } }]
              ; curryfied addition function
              [add { lambda {x} { lambda {y} {+ x y} } }]
              ; infinite fibonacci sequence !!!
              ; ( list 0 1 1 2 3 5 8 13 ... )
              [ fibo { pair 0
                            { pair 1
                                   { { { map2 add } fibo } { snd fibo } } } }]}
           { { list-ref fibo } 7} })
      ( numV 13))

(test (interp-expr `{let {[x {1 2}]} 3}) (numV 3))
(test (interp-expr `{letrec {[x {1 2}]} 3}) (numV 3))
(test (interp-expr `{snd {pair {1 2} 3}}) (numV 3))
(test (interp-expr `{letrec {[fac {lambda {n}
                                    {if n
                                        {* n {fac {- n 1}}}
                                        1}}]}
                      {fac 6}})
      (numV 720))
(test/exn (interp-expr `{fst 0}) "not a pair")
(test/exn (interp-expr `{snd {lambda {x} x}}) "not a pair")
(test/exn (interp-expr `{1 2}) "not a function")